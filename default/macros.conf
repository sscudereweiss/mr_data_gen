[linux_metrics_gen_cpu_stable]
definition = | eval metric_name:processmon.cpu.percent = if(random()%10 < 9, random()%15 + 70,random()%10 + 90) \
| eval metric_name:cpu.interrupt = random()%5000 / 100000 \
| eval metric_name:cpu.nice = round(0,2) \
| eval metric_name:cpu.softriq = random()%5000 / 100000 \
| eval metric_name:cpu.steal = round(0,2) \
| eval metric_name:cpu.system = $metric_name:processmon.cpu.percent$*(1/10) \
| eval metric_name:cpu.user = $metric_name:processmon.cpu.percent$*(9/10) \
| eval metric_name:cpu.wait = random()%5000 / 100000 \
| eval metric_name:cpu.idle = 100 - $metric_name:cpu.interrupt$ - $metric_name:cpu.nice$ - $metric_name:cpu.softriq$ - $metric_name:cpu.steal$ - $metric_name:cpu.system$ - $metric_name:cpu.user$ - $metric_name:cpu.wait$
iseval = 0

[linux_metrics_gen_df_stable]
definition = | eval metric_name:df.reserved = random()%10 \
| eval metric_name:df.used = random()%10 + 50 \
| eval metric_name:df.free = 100 - $metric_name:df.reserved$ - $metric_name:df.used$
iseval = 0

[linux_metrics_gen_disk_stable]
definition = | eval metric_name:disk.io_time.io_time = random()%6000 + 2000 \
| eval metric_name:disk.io_time.weighted_io_time = random()%21000 + 4000 \
| eval metric_name:disk.merged.read = 0 \
| eval metric_name:disk.merged.write = random()%100 +40 \
| eval metric_name:disk.octets.read = random()%1000 + 500 \
| eval metric_name:disk.octets.write = random()%1000 + 500 \
| eval metric_name:disk.ops.read = random()%50000/100 + 1800.00 \
| eval metric_name:disk.ops.write = random()%50000/100 + 1800.00 \
| eval metric_name:disk.time.read = (random()%400 + 400) / 1000 \
| eval metric_name:disk.time.write = (random()%1000 + 2000) / 1000
iseval = 0

[linux_metrics_gen_memory_stable]
definition = | eval metric_name:memory.buffered = random()%10 / 100000 \
| eval metric_name:memory.cached = random()%10 / 100000 \
| eval metric_name:memory.slab_recl = random()%500 / 100 \
| eval metric_name:memory.slab_unrecl = round(0,2) \
| eval metric_name:memory.used = random()%10 + 50 \
| eval metric_name:memory.free = 100-$metric_name:memory.used$
iseval = 0

[linux_metrics_gen_network_stable]
definition = | eval metric_name:interface.dropped.rx = 0 \
| eval metric_name:interface.dropped.tx = 0 \
| eval metric_name:interface.errors.rx = 0 \
| eval metric_name:interface.errors.tx = 0 \
| eval metric_name:interface.octets.rx = random()%500000 + 500000 \
| eval metric_name:interface.octets.tx = random()%1500000 + 1500000 \
| eval metric_name:interface.packets.rx = random()%700000000/100 + 1 \
| eval metric_name:interface.packets.tx = random()%200000000/100 + 1
iseval = 0

[TestSearch(3)]
args = num, server_type, myindex
definition = | eval count=$num$ | eval name=$server_type$ | eval index=$myindex$ | table count name index
iseval = 0

[generate_linux_entities(3)]
args = num, server_role, my_index
definition = [| makeresults count=$num$ | streamstats count | eval count = substr("00", 0, max(2-len(count), 0)) . count | eval role = $server_role$ | eval server=role."-".count | eval ip="10.1.2.1".count | map search="| makeresults count=1 `linux_metrics_gen_cpu_stable` `linux_metrics_gen_memory_stable` `linux_metrics_gen_df_stable` `linux_metrics_gen_disk_stable` `linux_metrics_gen_network_stable` | eval process_name=system | eval os=Linux | eval os_version = '2.6.32-573.8.1.el6.x86_64' | eval entity_type='nix_host' | mcollect index=$my_index$ host=$server$ marker=\"os=Linux, os_version='2.6.32-573.8.1.el6.x86_64', entity_type='*nix', process_name='system' role=$role$, ip=$ip$|\""]
iseval = 0

[linux_metrics_gen_memory_unstable]
definition = | eval minute = strftime(_time, "%M") \
| eval metric_name:memory.buffered = random()%10 / 100000 \
| eval metric_name:memory.cached = random()%10 / 100000 \
| eval metric_name:memory.slab_recl = random()%500 / 100 \
| eval metric_name:memory.slab_unrecl = round(0,2) \
| eval metric_name:memory.used = if(minute > 45 AND minute < 52,random()%10 + 90,abs((minute) + random()%10) / 2) \
| eval metric_name:memory.free = 100-$metric_name:memory.used$ \
| fields - minute
iseval = 0

[generate_linux_entities_unstable(3)]
args = num, server_role, my_index
definition = [| makeresults count=$num$ | streamstats count | eval count = substr("00", 0, max(2-len(count), 0)) . count | eval role = $server_role$ | eval server=role."-".count | eval ip="10.1.2.1".count | map search="| makeresults count=1 `linux_metrics_gen_cpu_stable` `linux_metrics_gen_memory_unstable` `linux_metrics_gen_df_unstable` `linux_metrics_gen_disk_stable` `linux_metrics_gen_network_stable` | eval process_name=system | eval os=Linux | eval os_version = '2.6.32-573.8.1.el6.x86_64' | eval entity_type='nix_host' | mcollect index=$my_index$ host=$server$ marker=\"os=Linux, os_version='2.6.32-573.8.1.el6.x86_64', entity_type='*nix', process_name='system', role=$role$, ip=$ip$|\""]
iseval = 0

[windows_metrics_stable]
definition = | eval metric_name:Processor.%_Idle_Time = if(random()%10 < 9, random()%10 + 10 ,random()%10 + 50) \
| eval metric_name:Memory.%_Committed_Bytes_In_Use = random()%10 + 60 \
| eval metric_name:LogicalDisk.%_Free_Space = random()%10 + 50 \
| eval metric_name:Avg._Disk_Bytes/Read = random()%50000/100 + 1800.00 \
| eval metric_name:Avg._Disk_Bytes/Write = random()%50000/100 + 1800.00 \
| eval metric_name:Network_Interface.Bytes_Received/sec = random()%700000000/100 + 1 \
| eval metric_name:Network_Interface.Bytes_Sent/sec= random()%200000000/100 + 1
iseval = 0

[generate_windows_entities(3)]
args = num, server_role, my_index
definition = [| makeresults count=$num$ \
    | streamstats count \
    | eval count = substr("00", 0, max(2-len(count), 0)) . count \
    | eval role = $server_role$ \
    | eval server=role."-".count\
    | map search="| makeresults count=1 `windows_metrics_stable` | mcollect index=$my_index$ host=$server$ marker=\"entity_type='Windows', instance=_Total\""]
iseval = 0

[linux_metrics_gen_df_unstable]
definition = | eval minute = strftime(_time, "%M") | eval metric_name:df.reserved = random()%10 | eval metric_name:df.used = if(minute > 45 AND minute < 52,random()%10 + 90,abs((minute) + random()%10) / 2) | eval metric_name:df.free = 100 - $metric_name:df.reserved$ - $metric_name:df.used$ | fields - minute
iseval = 0

[rum_metrics_stable(1)]
args = env
definition = | eval operationrand=random()%7 \
| eval metric_name:rum.page_view.count = random()%100 \
| eval metric_name:rum.client_error.count = if(operationrand=0, (random()%5), 0) \
| eval metric_name:rum.page_view.time.ns.p75 = random()%5 \
| eval metric_name:rum.resource_request.count = random()%5 \
| eval metric_name:rum.webvitals_lcp.time.ns.p75 = random()%50+460 \
| eval metric_name:rum.resource_request.time.ns.p75 = random()%5 \
| eval metric_name:rum.webvitals_fid.time.ns.p75 = (random()%30)+20 \
| eval metric_name:rum.webvitals_cls.score.p75 = random()%60/1000 \
| eval app=$env$ \
| eval computationId="FskgDsKA4AQ" \
| eval country="USA" \
| eval sf_environment=$env$ | eval nodetyperand=random()%2 | eval operationrand=random()%7 \
| eval sf_node_type=case(nodetyperand==0,"provider", nodetyperand==1,"view") | eval operationrand=random()%7 \
| eval sf_operation=case(operationrand==0, "HTTP POST", operationrand==1, "console.error", operationrand==2, "documentFetch", operationrand==3, "documentLoad", operationrand==4, "onerror", operationrand==5, "resourceFetch", operationrand==6, "webvitals") \
| eval sf_organizationID="FgpBtZ0A0AA" \
| eval sf_product="web" \
| eval sf_realm="us1" \
| eval sf_resolutionMs=30000 \
| eval sf_ua_browsername="Chrome" \
| eval sf_ua_osname="Mac OS X" \
| eval entity_type="RUM Browser Metrics" \
| fields - operationrand - nodetyperand
iseval = 0